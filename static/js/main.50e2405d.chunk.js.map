{"version":3,"sources":["app/artist/Vector.js","utils/constants.js","app/artist/Artist.js","app/App.js","serviceWorker.js","index.js"],"names":["Vector","x","y","undefined","this","Math","random","factor","ARENA_RADIUS","magnitude","CENTER","pos2","sqrt","subtract","scalar","multiply","direction","divide","newPositionTheory","add","distance","intersectTwoCircles","newPosition1","newPosition2","pos1","r1","r2","x1","y1","x2","y2","centerdx","centerdy","R","abs","R2","R4","a","r2r2","c","fx","gx","ix2","fy","gy","iy2","CANVAS_WIDTH","CANVAS_HEIGHT","Artist","canvas","ctx","getContext","behaviours","positions","colors","initBehaviours","initPositions","initColors","movementChangeTimestamps","Array","length","fill","hasMovedLastUpdate","loopTimestamp","runLoop","amount","parseInt","URL","window","location","href","searchParams","get","isNaN","partners","_getPermutation","i","partner","floor","rule","getRandomBehaviourRule","push","logCycles","console","log","k","arr","val","indexOf","numbers","keys","j","forEach","distinctColors","count","map","hex","setInterval","draw","updatePositions","fillStyle","fillRect","width","height","drawArena","drawAgent","color","partnerColor","partnerRelationshipGood","sign","beginPath","arc","PI","font","fillText","lineWidth","grd","createRadialGradient","addColorStop","strokeStyle","stroke","newPositions","myPosition","partnerPosition","goalDistance","findNewPosition","newPosition","hasMoved","updateHasMovedLastUpdate","updateBehaviour","timeDelta","n","changeProbability","exp","directionMultiplier","findDirectionMultiplier","moveUniform","currentDistance","goalDistanceSign","App","className","ref","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50e2405d.chunk.js","sourcesContent":["import {ARENA_RADIUS, CENTER} from \"../../utils/constants\";\n\nexport class Vector {\n    constructor(x, y) {\n        if ((x === undefined) || (y === undefined)) {\n            this.x = Math.random() - 0.5;\n            this.y = Math.random() - 0.5;\n            const factor = ARENA_RADIUS * Math.random() / this.magnitude();\n\n            this.x *= factor;\n            this.x += CENTER.x;\n\n            this.y *= factor;\n            this.y += CENTER.y;\n        } else {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    add(pos2) {\n        return new Vector(this.x + pos2.x, this.y + pos2.y);\n    }\n\n    subtract(pos2) {\n        return new Vector(this.x - pos2.x, this.y - pos2.y);\n    }\n\n    magnitude() {\n        return Math.sqrt((this.x) ** 2 + (this.y) ** 2);\n    }\n\n    distance(pos2) {\n        return this.subtract(pos2).magnitude();\n    }\n\n    multiply(scalar) {\n        return new Vector(this.x * scalar, this.y * scalar);\n    }\n\n    divide(scalar) {\n        return this.multiply(1.0 / scalar)\n    }\n\n    moveUniform(direction) {\n        direction = direction.divide(direction.magnitude());\n        const newPositionTheory = this.add(direction);\n\n        if (newPositionTheory.distance(CENTER) <= ARENA_RADIUS) {\n            return newPositionTheory;\n        }\n\n        const [newPosition1, newPosition2] = intersectTwoCircles(CENTER, ARENA_RADIUS, this, 1);\n\n        if (newPositionTheory.distance(newPosition1) <= newPositionTheory.distance(newPosition2)) {\n            return newPosition1;\n        } else {\n            return newPosition2;\n        }\n    }\n}\n\n// pos1 is the center of the first circle, with radius r1\n// pos2 is the center of the second circle, with radius r2\n// source: https://gist.github.com/jupdike/bfe5eb23d1c395d8a0a1a4ddd94882ac\n// based on the math here:\n// http://math.stackexchange.com/a/1367732\nconst intersectTwoCircles = (pos1, r1, pos2, r2) => {\n    const [x1, y1, x2, y2] = [pos1.x, pos1.y, pos2.x, pos2.y];\n    var centerdx = x1 - x2;\n    var centerdy = y1 - y2;\n    var R = Math.sqrt(centerdx * centerdx + centerdy * centerdy);\n    if (!(Math.abs(r1 - r2) <= R && R <= r1 + r2)) { // no intersection\n        return []; // empty list of results\n    }\n    // intersection(s) should exist\n\n    var R2 = R * R;\n    var R4 = R2 * R2;\n    var a = (r1 * r1 - r2 * r2) / (2 * R2);\n    var r2r2 = (r1 * r1 - r2 * r2);\n    var c = Math.sqrt(2 * (r1 * r1 + r2 * r2) / R2 - (r2r2 * r2r2) / R4 - 1);\n\n    var fx = (x1 + x2) / 2 + a * (x2 - x1);\n    var gx = c * (y2 - y1) / 2;\n    var ix1 = fx + gx;\n    var ix2 = fx - gx;\n\n    var fy = (y1 + y2) / 2 + a * (y2 - y1);\n    var gy = c * (x1 - x2) / 2;\n    var iy1 = fy + gy;\n    var iy2 = fy - gy;\n\n    // note if gy == 0 and gx == 0 then the circles are tangent and there is only one solution\n    // but that one solution will just be duplicated as the code is currently written\n    return [new Vector(ix1, iy1), new Vector(ix2, iy2)];\n};","import {Vector} from \"../app/artist/Vector\";\n\nexport const CANVAS_WIDTH = 750;\nexport const CANVAS_HEIGHT = 750;\n\nexport const ARENA_RADIUS = 350;\nexport const AGENT_RADIUS = 20;\n\nexport const CENTER = new Vector(CANVAS_WIDTH / 2.0, CANVAS_HEIGHT / 2.0);","import {Vector} from \"./Vector\";\nimport {AGENT_RADIUS, ARENA_RADIUS, CENTER} from \"../../utils/constants\";\nimport distinctColors from \"distinct-colors/src\";\n\nexport class Artist {\n    constructor(canvas){\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n\n        this.behaviours = [];\n        this.positions = [];\n        this.colors = [];\n\n        this.initBehaviours();\n        this.initPositions();\n        this.initColors();\n\n        this.movementChangeTimestamps = new Array(this.behaviours.length).fill(0);\n        this.hasMovedLastUpdate = new Array(this.behaviours.length).fill(false);\n        this.loopTimestamp = 1;\n\n        this.runLoop();\n    }\n\n    initBehaviours(){\n        let amount = parseInt(new URL(window.location.href).searchParams.get('amount'));\n        if (isNaN(amount) || amount <= 1){ amount = 15; }\n        const partners = this._getPermutation(amount);\n\n        for (let i = 0; i < amount; i++){\n            // const partner = (i+1) % amount;\n            let partner = partners[i];\n            do { partner = Math.floor(Math.random() * amount); } while (partner === i);\n            partners[i] = partner;\n            const rule = this.getRandomBehaviourRule();\n\n            this.behaviours.push([partner, rule])\n        }\n\n        this.logCycles(partners);\n    }\n\n    logCycles(partners) {\n        console.log(\"Cycles:\");\n\n        for (let k = 0; k < partners.length; k++){\n            let arr = [];\n            let val = k;\n            do {\n                if (arr.indexOf(val) !== -1){ arr.push(val); break; }\n                arr.push(val);\n                val = partners[val];\n            } while(val !== k);\n\n            console.log(k, arr);\n        }\n    }\n\n    _getPermutation(length) {\n        const numbers = [...Array(length).keys()];\n\n        for (let i = numbers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [numbers[i], numbers[j]] = [numbers[j], numbers[i]];\n        }\n\n        return numbers;\n    }\n\n    getRandomBehaviourRule(){\n        return Math.random()*4*ARENA_RADIUS - 2*ARENA_RADIUS;\n    }\n\n    initPositions(){\n        this.behaviours.forEach(() => this.positions.push(new Vector()));\n    }\n\n    initColors(){\n        this.colors = distinctColors({count: this.positions.length}).map(c => c.hex());\n    }\n\n    runLoop() {\n        setInterval(() => {\n            this.draw();\n            this.updatePositions();\n            this.loopTimestamp++;\n        }, 5)\n    }\n\n    draw(){\n        this.ctx.fillStyle = \"black\";\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.drawArena();\n\n        for (let i = 0; i < this.positions.length; i++){\n            this.drawAgent(i);\n        }\n    }\n\n    drawAgent(i){\n        const { ctx } = this;\n        const { x, y } = this.positions[i];\n        const color = this.colors[i];\n        const partnerColor = this.colors[this.behaviours[i][0]];\n        const partnerRelationshipGood = 1 === Math.sign(this.behaviours[i][1]);\n\n        ctx.beginPath();\n        ctx.arc(x, y, AGENT_RADIUS, 0, 2 * Math.PI, false);\n        ctx.fillStyle = color;\n        ctx.fill();\n\n        ctx.font = '15px serif';\n        ctx.fillText(partnerRelationshipGood ? '❤️' : '🔥', x + 10, y - 10);\n\n        ctx.beginPath();\n        ctx.arc(x + AGENT_RADIUS / 3, y + AGENT_RADIUS / 3, AGENT_RADIUS / 3, 0, 2 * Math.PI, false);\n        ctx.fillStyle = partnerColor;\n        ctx.fill();\n    }\n\n    drawArena(){\n        this.ctx.beginPath();\n        this.ctx.arc(CENTER.x, CENTER.y, ARENA_RADIUS, 0, 2 * Math.PI, false);\n        this.ctx.lineWidth = 8;\n\n        const grd = this.ctx.createRadialGradient(CENTER.x, CENTER.y, ARENA_RADIUS, CENTER.x, CENTER.y, ARENA_RADIUS + 50);\n\n        grd.addColorStop(0, 'black');\n        grd.addColorStop(.2, 'white');\n        this.ctx.strokeStyle = grd;\n        this.ctx.stroke();\n    }\n\n    updatePositions(){\n        const {positions, behaviours} = this;\n        const newPositions = [];\n\n        for (let i = 0; i < positions.length; i++){\n            if (!behaviours[i]){ continue; }\n\n            const myPosition = positions[i];\n            const partnerPosition = positions[behaviours[i][0]];\n            const goalDistance = behaviours[i][1];\n\n            const [newPosition, hasMoved] = this.findNewPosition(myPosition, partnerPosition, goalDistance);\n            newPositions[i] = newPosition;\n\n            this.updateHasMovedLastUpdate(i, hasMoved);\n            this.updateBehaviour(i, hasMoved);\n        }\n\n        this.positions = newPositions;\n    }\n\n    updateHasMovedLastUpdate(i, hasMoved) {\n        if (this.hasMovedLastUpdate[i] !== hasMoved){\n            this.movementChangeTimestamps[i] = this.loopTimestamp;\n            this.hasMovedLastUpdate[i] = hasMoved;\n        }\n    }\n\n    updateBehaviour(i, hasMoved){\n        const timeDelta = this.loopTimestamp - this.movementChangeTimestamps[i];\n        const n = 10000;\n        const k = n/8;\n        const changeProbability = (Math.exp(timeDelta / k) - Math.exp(1/k))/(Math.exp(n/k) - Math.exp(1/k));\n        if (Math.random() > changeProbability){\n            return;\n        }\n\n        this.behaviours[i][1] = this.getRandomBehaviourRule();\n    }\n\n    findNewPosition(myPosition, partnerPosition, goalDistance){\n        const directionMultiplier = this.findDirectionMultiplier(myPosition, partnerPosition, goalDistance);\n        if (directionMultiplier === 0){ return [myPosition, false]; }\n\n        const direction = partnerPosition.subtract(myPosition).multiply(directionMultiplier);\n\n        return [myPosition.moveUniform(direction), true];\n    }\n\n    findDirectionMultiplier(myPosition, partnerPosition, goalDistance){\n        const currentDistance = myPosition.distance(partnerPosition);\n        const goalDistanceSign = Math.sign(goalDistance);\n\n        if (goalDistanceSign > 0){\n            goalDistance = 2 * ARENA_RADIUS - goalDistance;\n        }\n\n        return (goalDistanceSign * currentDistance > goalDistance)? goalDistanceSign : 0;\n    }\n}","import React from 'react';\nimport './App.css';\nimport {CANVAS_HEIGHT, CANVAS_WIDTH} from \"../utils/constants\";\nimport {Artist} from \"./artist/Artist\";\n\nfunction App() {\n    const createArtist = (canvas) => new Artist(canvas);\n    return (\n        <div className=\"wrapper\">\n            <canvas width={CANVAS_WIDTH} height={CANVAS_HEIGHT} ref={createArtist}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}