{"version":3,"sources":["app/Vector/Vector.js","utils/constants.js","redux/constants/settings.js","redux/actions/index.js","redux/reducers/settings.js","redux/reducers/agents.js","redux/reducers/index.js","redux/store/index.js","app/SwarmSimulation/SwarmSimulation.js","app/Settings/Settings.js","app/AgentList/Agent.js","app/AgentList/AgentList.js","app/App.js","serviceWorker.js","index.js"],"names":["Vector","x","y","undefined","this","Math","random","factor","ARENA_RADIUS","magnitude","CENTER","pos2","sqrt","subtract","scalar","multiply","direction","divide","newPositionTheory","add","distance","intersectTwoCircles","newPosition1","newPosition2","pos1","r1","r2","x1","y1","x2","y2","centerdx","centerdy","R","abs","Error","R2","R4","a","r2r2","c","fx","gx","ix2","fy","gy","iy2","CANVAS_WIDTH","CANVAS_HEIGHT","behaviourUpdateRules","setAgentBehaviour","agent_id","behaviour","type","defaultSettings","behaviourUpdateRule","nextAgentId","colors","distinctColors","count","map","hex","defaultAgents","i","createAgentSpec","allIds","Object","keys","forEach","id","partner_id","myId","foreignId","parseInt","length","pickForeignId","createDefaultAgents","toString","getRandomBehaviour","color","computeRemoveAgent","agents","newAgents","hasOwnProperty","combineReducers","settings","state","action","rule","update","$set","preloadedState","load","max","values","store","createStore","rootReducer","applyMiddleware","logger","save","SwarmSimulation","canvas","ctx","getContext","positions","movementChangeTimestamps","hasMovedLastUpdate","loopCounter","loopInterval","runLoop","loadAgents","draw","setInterval","updatePositions","e","clearInterval","fillStyle","fillRect","width","height","drawArena","drawAgent","beginPath","arc","PI","lineWidth","grd","createRadialGradient","addColorStop","strokeStyle","stroke","partnerColor","partnerRelationshipGood","sign","fill","font","fillText","getState","newPositions","agent","myPosition","partnerPosition","goalDistance","findNewPosition","newPosition","hasMoved","updateHasMovedLastUpdate","updateBehaviour","timeDelta","k","n","changeProbability","exp","dispatch","directionMultiplier","findDirectionMultiplier","moveUniform","currentDistance","goalDistanceSign","Settings","useDispatch","useSelector","onUpdateRuleChange","useCallback","event","target","value","Table","variant","Form","Control","as","defaultValue","onChange","Agent","allAgents","onSetpartner_id","onSetBehaviourSign","onSetBehaviourMagnitude","inputInt","parseFloat","isNaN","onRemoveAgent","key","className","style","background","foreignAgent","Button","onClick","icon","Trashcan","AgentList","useAgentsArray","onAddAgent","colSpan","Plus","sortBy","App","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd24f9b1.chunk.js","sourcesContent":["import {ARENA_RADIUS, CENTER} from \"../../utils/constants\";\n\nexport class Vector {\n    constructor(x, y) {\n        if ((x === undefined) || (y === undefined)) {\n            this.x = Math.random() - 0.5;\n            this.y = Math.random() - 0.5;\n            const factor = ARENA_RADIUS * Math.random() / this.magnitude();\n\n            this.x *= factor;\n            this.x += CENTER.x;\n\n            this.y *= factor;\n            this.y += CENTER.y;\n        } else {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    add(pos2) {\n        return new Vector(this.x + pos2.x, this.y + pos2.y);\n    }\n\n    subtract(pos2) {\n        return new Vector(this.x - pos2.x, this.y - pos2.y);\n    }\n\n    magnitude() {\n        return Math.sqrt((this.x) ** 2 + (this.y) ** 2);\n    }\n\n    distance(pos2) {\n        return this.subtract(pos2).magnitude();\n    }\n\n    multiply(scalar) {\n        return new Vector(this.x * scalar, this.y * scalar);\n    }\n\n    divide(scalar) {\n        return this.multiply(1.0 / scalar)\n    }\n\n    moveUniform(direction) {\n        direction = direction.divide(direction.magnitude());\n        const newPositionTheory = this.add(direction);\n\n        if (newPositionTheory.distance(CENTER) <= ARENA_RADIUS) {\n            return newPositionTheory;\n        }\n\n        const [newPosition1, newPosition2] = intersectTwoCircles(CENTER, ARENA_RADIUS, this, 1);\n\n        if (newPositionTheory.distance(newPosition1) <= newPositionTheory.distance(newPosition2)) {\n            return newPosition1;\n        } else {\n            return newPosition2;\n        }\n    }\n}\n\n// pos1 is the center of the first circle, with radius r1\n// pos2 is the center of the second circle, with radius r2\n// source: https://gist.github.com/jupdike/bfe5eb23d1c395d8a0a1a4ddd94882ac\n// based on the math here:\n// http://math.stackexchange.com/a/1367732\nconst intersectTwoCircles = (pos1, r1, pos2, r2) => {\n    const [x1, y1, x2, y2] = [pos1.x, pos1.y, pos2.x, pos2.y];\n    var centerdx = x1 - x2;\n    var centerdy = y1 - y2;\n    var R = Math.sqrt(centerdx * centerdx + centerdy * centerdy);\n    if (!(Math.abs(r1 - r2) <= R && R <= r1 + r2)) { // no intersection\n        throw new Error(\"No intersection: \" + [x1, y1, r1, x2, y2, r2]);\n    }\n    // intersection(s) should exist\n\n    var R2 = R * R;\n    var R4 = R2 * R2;\n    var a = (r1 * r1 - r2 * r2) / (2 * R2);\n    var r2r2 = (r1 * r1 - r2 * r2);\n    var c = Math.sqrt(2 * (r1 * r1 + r2 * r2) / R2 - (r2r2 * r2r2) / R4 - 1);\n\n    var fx = (x1 + x2) / 2 + a * (x2 - x1);\n    var gx = c * (y2 - y1) / 2;\n    var ix1 = fx + gx;\n    var ix2 = fx - gx;\n\n    var fy = (y1 + y2) / 2 + a * (y2 - y1);\n    var gy = c * (x1 - x2) / 2;\n    var iy1 = fy + gy;\n    var iy2 = fy - gy;\n\n    // note if gy == 0 and gx == 0 then the circles are tangent and there is only one solution\n    // but that one solution will just be duplicated as the code is currently written\n    return [new Vector(ix1, iy1), new Vector(ix2, iy2)];\n};","import {Vector} from \"../app/Vector/Vector\";\n\nexport const CANVAS_WIDTH = 750;\nexport const CANVAS_HEIGHT = 750;\n\nexport const ARENA_RADIUS = 350;\nexport const AGENT_RADIUS = 20;\n\nexport const CENTER = new Vector(CANVAS_WIDTH / 2.0, CANVAS_HEIGHT / 2.0);\n\nexport const AMOUNT_DEFAULT_AGENTS = 3;\nexport const AMOUNT_DISTINCT_COLORS = 50;","export const behaviourUpdateRules = {\n    ALL: 'ALL',\n    ONLY_STATIONARY: 'ONLY_STATIONARY',\n    NEVER: 'NEVER',\n};","export const SET_BEHAVIOUR_UPDATE_RULE = 'SET_BEHAVIOUR_UPDATE_RULE';\nexport const setBehaviourUpdateRule = rule => ({\n    type: SET_BEHAVIOUR_UPDATE_RULE,\n    rule\n});\n\nexport const ADD_AGENT = 'ADD_AGENT';\nexport const addAgent = () => ({\n    type: ADD_AGENT\n});\n\nexport const SET_AGENT_BEHAVIOUR = 'SET_AGENT_BEHAVIOUR';\nexport const setAgentBehaviour = (agent_id, behaviour) => ({\n    type: SET_AGENT_BEHAVIOUR,\n    agent_id,\n    behaviour\n});\n\nexport const RANDOMIZE_AGENT_BEHAVIOUR = 'RANDOMIZE_AGENT_BEHAVIOUR';\nexport const randomizeAgentBehaviour = (agent_id) => ({\n    type: RANDOMIZE_AGENT_BEHAVIOUR,\n    agent_id\n});\n\nexport const SET_PARTNER_ID = 'SET_PARTNER_ID';\nexport const setPartnerId = (agent_id, partner_id) => ({\n    type: SET_PARTNER_ID,\n    agent_id,\n    partner_id\n});\n\nexport const REMOVE_AGENT = 'REMOVE_AGENT';\nexport const removeAgent = (agent_id) => ({\n    type: REMOVE_AGENT,\n    agent_id\n});","import { behaviourUpdateRules } from \"../constants/settings\";\nimport {SET_BEHAVIOUR_UPDATE_RULE} from \"../actions\";\n\nconst defaultSettings = {\n    behaviourUpdateRule: behaviourUpdateRules.NEVER\n};\n\nexport const settings = (state = defaultSettings, action) => {\n    switch (action.type) {\n        case SET_BEHAVIOUR_UPDATE_RULE:\n            return {...state, behaviourUpdateRule: action.rule};\n        default:\n            return state\n    }\n};","import {ADD_AGENT, RANDOMIZE_AGENT_BEHAVIOUR, REMOVE_AGENT, SET_AGENT_BEHAVIOUR, SET_PARTNER_ID} from \"../actions\";\nimport {AMOUNT_DEFAULT_AGENTS, AMOUNT_DISTINCT_COLORS, ARENA_RADIUS} from \"../../utils/constants\";\nimport distinctColors from \"distinct-colors\";\nimport update from 'immutability-helper';\n\nlet nextAgentId = 1;\nconst colors = distinctColors({ count: AMOUNT_DISTINCT_COLORS }).map(c => c.hex());\nconst defaultAgents = createDefaultAgents();\n\nexport const determineHighestAgentId = (agents) => {\n    if (agents) {\n        nextAgentId = 1 + Math.max(...Object.values(agents).map(a => parseInt(a.id))) || 1;\n    }\n};\n\nexport const agents = (state = defaultAgents, action) => {\n    switch (action.type) {\n        case ADD_AGENT:\n            return {...state, ...createAgentSpec()};\n        case SET_AGENT_BEHAVIOUR:\n            return update(state, { [action.agent_id] : { behaviour: { $set: action.behaviour } } });\n        case RANDOMIZE_AGENT_BEHAVIOUR:\n            return update(state, { [action.agent_id] : { behaviour: { $set: getRandomBehaviour() } } });\n        case SET_PARTNER_ID:\n            return update(state, { [action.agent_id] : { partner_id: { $set: action.partner_id || null } } });\n        case REMOVE_AGENT:\n            return computeRemoveAgent(state, action.agent_id);\n        default:\n            return state\n    }\n};\n\nfunction createDefaultAgents() {\n    let defaultAgents = {};\n\n    for (let i = 0; i < AMOUNT_DEFAULT_AGENTS; i++) {\n        defaultAgents = {...defaultAgents, ...createAgentSpec()};\n    }\n\n    const allIds = Object.keys(defaultAgents);\n\n    allIds.forEach(function (id) {\n        const agent = defaultAgents[id];\n        agent.partner_id = pickForeignId(id, allIds);\n    });\n\n    return defaultAgents;\n}\n\nfunction pickForeignId(myId, allIds) {\n    let foreignId;\n\n    do {\n        foreignId = allIds[parseInt(Math.random() * allIds.length)];\n    } while (foreignId === myId);\n\n    return foreignId;\n}\n\nfunction createAgentSpec() {\n    const id = (nextAgentId++).toString();\n    const partner_id = null;\n    const behaviour = getRandomBehaviour();\n    const color = colors[id % colors.length];\n\n    return {[id]: {id, partner_id, behaviour, color}}\n}\n\nfunction getRandomBehaviour() {\n    return Math.random() * 4 * ARENA_RADIUS - 2 * ARENA_RADIUS\n}\n\nfunction computeRemoveAgent(agents, agent_id) {\n    const newAgents = {...agents};\n    delete newAgents[agent_id];\n\n    for (let id in newAgents){\n        if (!newAgents.hasOwnProperty(id)){ continue; }\n\n        if (newAgents[id].partner_id === agent_id){\n            newAgents[id].partner_id = null;\n        }\n    }\n\n    return newAgents;\n}","import { combineReducers } from 'redux'\nimport { settings } from \"./settings\";\nimport {agents} from \"./agents\";\n\nexport default combineReducers({\n    settings,\n    agents\n})","import rootReducer from '../reducers'\nimport {applyMiddleware, createStore} from \"redux\";\nimport logger from 'redux-logger'\nimport { save, load } from \"redux-localstorage-simple\"\nimport {determineHighestAgentId} from \"../reducers/agents\";\n\nconst preloadedState = load();\ndetermineHighestAgentId(preloadedState.agents);\n\nexport const store = createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(logger, save()),\n);","import {Vector} from \"../Vector/Vector\";\nimport {AGENT_RADIUS, ARENA_RADIUS, CENTER} from \"../../utils/constants\";\nimport {store} from \"../../redux/store\";\nimport {behaviourUpdateRules} from \"../../redux/constants/settings\";\nimport {randomizeAgentBehaviour} from \"../../redux/actions\";\n\nexport class SwarmSimulation {\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n\n        this.agents = {};\n        this.positions = {};\n        this.movementChangeTimestamps = {};\n        this.hasMovedLastUpdate = {};\n        this.loopCounter = 1;\n\n        this.loopInterval = null;\n\n        this.runLoop();\n    }\n\n    runLoop() {\n        this.loadAgents();\n        this.draw();\n\n        this.loopInterval = setInterval(() => {\n            try {\n                this.draw();\n                this.loadAgents();\n                this.updatePositions();\n                this.loopCounter++;\n            } catch (e) {\n                clearInterval(this.loopInterval);\n                throw e;\n            }\n        }, 5)\n    }\n\n    draw() {\n        this.ctx.fillStyle = \"black\";\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.drawArena();\n\n        for (let id in this.agents) {\n            this.drawAgent(id);\n        }\n    }\n\n    drawArena() {\n        this.ctx.beginPath();\n        this.ctx.arc(CENTER.x, CENTER.y, ARENA_RADIUS, 0, 2 * Math.PI, false);\n        this.ctx.lineWidth = 8;\n\n        const grd = this.ctx.createRadialGradient(CENTER.x, CENTER.y, ARENA_RADIUS, CENTER.x, CENTER.y, ARENA_RADIUS + 50);\n\n        grd.addColorStop(0, 'black');\n        grd.addColorStop(.2, 'white');\n        this.ctx.strokeStyle = grd;\n        this.ctx.stroke();\n    }\n\n    drawAgent(id) {\n        const {ctx} = this;\n        const {x, y} = this.positions[id];\n        const color = this.agents[id].color;\n        const partner_id = this.agents[id].partner_id;\n        const partnerColor = partner_id && this.agents[partner_id].color;\n        const partnerRelationshipGood = 1 === Math.sign(this.agents[id].behaviour);\n\n        ctx.beginPath();\n        ctx.arc(x, y, AGENT_RADIUS, 0, 2 * Math.PI, false);\n        ctx.fillStyle = color;\n        ctx.fill();\n\n        if (partner_id){\n            ctx.font = '15px serif';\n            ctx.fillText(partnerRelationshipGood ? '❤️' : '🔥', x + 10, y - 10);\n\n            ctx.beginPath();\n            ctx.arc(x + AGENT_RADIUS / 3, y + AGENT_RADIUS / 3, AGENT_RADIUS / 3, 0, 2 * Math.PI, false);\n            ctx.fillStyle = partnerColor;\n            ctx.fill();\n        }\n    }\n\n    loadAgents() {\n        this.agents = store.getState().agents;\n\n        for (let id in this.agents) {\n            if (!this.positions.hasOwnProperty(id)) {\n                this.positions[id] = new Vector();\n                this.movementChangeTimestamps[id] = 0;\n                this.hasMovedLastUpdate[id] = false;\n            }\n        }\n\n        for (let id in this.positions) {\n            if (!this.agents.hasOwnProperty(id)) {\n                delete this.positions[id];\n                delete this.movementChangeTimestamps[id];\n                delete this.hasMovedLastUpdate[id];\n            }\n        }\n    }\n\n    updatePositions() {\n        const {positions, agents} = this;\n        const newPositions = {...positions};\n\n        for (let id in agents) {\n            const agent = agents[id];\n            if (!agent.partner_id) {\n                continue;\n            }\n\n            const myPosition = positions[id];\n            const partnerPosition = positions[agent.partner_id];\n            const goalDistance = agent.behaviour;\n\n            const [newPosition, hasMoved] = this.findNewPosition(myPosition, partnerPosition, goalDistance);\n            newPositions[id] = newPosition;\n\n            this.updateHasMovedLastUpdate(id, hasMoved);\n            this.updateBehaviour(id, hasMoved);\n        }\n\n        this.positions = newPositions;\n    }\n\n    updateHasMovedLastUpdate(id, hasMoved) {\n        if (this.hasMovedLastUpdate[id] !== hasMoved) {\n            this.movementChangeTimestamps[id] = this.loopCounter;\n            this.hasMovedLastUpdate[id] = hasMoved;\n        }\n    }\n\n    updateBehaviour(id, hasMoved) {\n        const behaviourUpdateRule = store.getState().settings.behaviourUpdateRule;\n\n        if (behaviourUpdateRule === behaviourUpdateRules.NEVER) {\n            return;\n        }\n\n        if (behaviourUpdateRule === behaviourUpdateRules.ONLY_STATIONARY && hasMoved) {\n            return;\n        }\n\n        const timeDelta = this.loopCounter - this.movementChangeTimestamps[id];\n        const n = 10000;\n        const k = n / 8;\n        const changeProbability = (Math.exp(timeDelta / k) - Math.exp(1 / k)) / (Math.exp(n / k) - Math.exp(1 / k));\n\n        if (Math.random() > changeProbability) {\n            return;\n        }\n\n        store.dispatch(randomizeAgentBehaviour(id));\n    }\n\n    findNewPosition(myPosition, partnerPosition, goalDistance) {\n        const directionMultiplier = this.findDirectionMultiplier(myPosition, partnerPosition, goalDistance);\n        if (directionMultiplier === 0) {\n            return [myPosition, false];\n        }\n\n        const direction = partnerPosition.subtract(myPosition).multiply(directionMultiplier);\n\n        return [myPosition.moveUniform(direction), true];\n    }\n\n    findDirectionMultiplier(myPosition, partnerPosition, goalDistance) {\n        const currentDistance = myPosition.distance(partnerPosition);\n        const goalDistanceSign = Math.sign(goalDistance);\n\n        return (goalDistanceSign * currentDistance > goalDistance) ? goalDistanceSign : 0;\n    }\n}","import Form from \"react-bootstrap/Form\";\nimport Table from \"react-bootstrap/Table\";\nimport React, {useCallback} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {behaviourUpdateRules} from \"../../redux/constants/settings\";\nimport {setBehaviourUpdateRule} from \"../../redux/actions\";\n\nexport const Settings = () => {\n    const dispatch = useDispatch();\n    const { behaviourUpdateRule } = useSelector(state => state.settings);\n    const onUpdateRuleChange = useCallback((event) => {\n        dispatch(setBehaviourUpdateRule(event.target.value));\n    }, [dispatch]);\n\n    return (\n        <Table variant=\"dark\">\n            <tbody>\n            <tr>\n                <td>Automatically update agent behaviour</td>\n                <td>\n                    <Form.Control as=\"select\" defaultValue={behaviourUpdateRule} onChange={onUpdateRuleChange}>\n                        <option value={behaviourUpdateRules.ALL}>Automatically update all agents</option>\n                        <option value={behaviourUpdateRules.ONLY_STATIONARY}>Automatically update only stationary agents</option>\n                        <option value={behaviourUpdateRules.NEVER}>Never update behaviour of agents</option>\n                    </Form.Control>\n                </td>\n            </tr>\n            </tbody>\n        </Table>\n    );\n}","import React, {useCallback} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport {useDispatch} from \"react-redux\";\nimport {removeAgent, setAgentBehaviour, setPartnerId} from \"../../redux/actions\";\nimport './Agent.css';\nimport Button from \"react-bootstrap/Button\";\nimport Octicon, {Trashcan} from \"@primer/octicons-react\";\n\nexport const Agent = ({allAgents, agent}) => {\n    const dispatch = useDispatch();\n    const onSetpartner_id = useCallback(\n        (event) => dispatch(setPartnerId(\n            agent.id,\n            event.target.value\n        )),\n        [dispatch, agent.id]\n    );\n    const onSetBehaviourSign = useCallback(\n        (event) => dispatch(setAgentBehaviour(\n            agent.id,\n            Math.abs(agent.behaviour) * event.target.value\n        )),\n        [dispatch, agent.id, agent.behaviour]\n    );\n    const onSetBehaviourMagnitude = useCallback(\n        (event) => {\n            const inputInt = parseFloat(event.target.value)\n\n            if (isNaN(inputInt) || inputInt <= 0) {\n                return;\n            }\n\n            dispatch(setAgentBehaviour(\n                agent.id,\n                Math.sign(agent.behaviour) * inputInt\n            ));\n        },\n        [dispatch, agent.id, agent.behaviour]\n    );\n    const onRemoveAgent = useCallback((event) => dispatch(removeAgent(agent.id)), [dispatch, agent.id]);\n\n    return (\n        <tr key={agent.id}>\n            <td>#{agent.id} <span className=\"colorIndictaor\" style={{background: agent.color}}/></td>\n            <td>\n                <Form.Control as=\"select\" defaultValue={agent.partner_id || \"\"} onChange={onSetpartner_id}>\n                    <option value={\"\"} key={null} className=\"emptyOption\">No partner</option>\n                    {allAgents.map(foreignAgent => (foreignAgent.id === agent.id) ? null : (\n                        <option value={foreignAgent.id} key={foreignAgent.id}>#{foreignAgent.id}</option>\n                    ))}\n                </Form.Control>\n            </td>\n            <td>\n                <Form.Control value={Math.abs(agent.behaviour)} onChange={onSetBehaviourMagnitude}/>\n            </td>\n            <td>\n                <Form.Control as=\"select\" value={Math.sign(agent.behaviour)} onChange={onSetBehaviourSign}>\n                    <option value={1}>Get close</option>\n                    <option value={-1}>Stay away</option>\n                </Form.Control>\n            </td>\n            <td>\n                <Button variant=\"light\" onClick={onRemoveAgent}>\n                    <Octicon icon={Trashcan} className=\"icon\"/>\n                </Button>\n            </td>\n        </tr>\n    );\n};\n","import Table from \"react-bootstrap/Table\";\nimport React, {useCallback} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { sortBy } from \"lodash/collection\";\nimport {Agent} from \"./Agent\";\nimport Button from \"react-bootstrap/Button\";\nimport Octicon, {Plus} from \"@primer/octicons-react\";\nimport \"./AgentList.css\";\nimport {addAgent} from \"../../redux/actions\";\n\nexport const AgentList = () => {\n    const agents = useAgentsArray();\n    const dispatch = useDispatch();\n    const onAddAgent = useCallback((event) => dispatch(addAgent()), [dispatch]);\n\n    return (\n        <Table variant=\"dark\">\n            <thead>\n                <tr>\n                    <th>Agent ID</th>\n                    <th>Partner ID</th>\n                    <th>Goal distance</th>\n                    <th>Goal behaviour</th>\n                    <th>&nbsp;</th>\n                </tr>\n            </thead>\n            <tbody>\n                {agents.map(agent => (\n                    <Agent agent={agent} allAgents={agents} key={agent.id}/>\n                ))}\n                <tr><td colSpan={5} className=\"buttonCell\">\n                    <Button variant=\"light\" onClick={onAddAgent}>\n                        <Octicon icon={Plus} className=\"icon\"/> Add agent\n                    </Button>\n                </td></tr>\n            </tbody>\n        </Table>\n    );\n};\n\nconst useAgentsArray = () => {\n    const agents = useSelector(state => state.agents);\n\n    return sortBy(Object.values(agents), (agent) => parseInt(agent.id));\n};","import React from 'react';\nimport './App.css';\nimport {CANVAS_HEIGHT, CANVAS_WIDTH} from \"../utils/constants\";\nimport {SwarmSimulation} from \"./SwarmSimulation/SwarmSimulation\";\nimport {Settings} from \"./Settings/Settings\";\nimport {AgentList} from \"./AgentList/AgentList\";\n\nfunction App() {\n    const createSimulation = (canvas) => new SwarmSimulation(canvas);\n    return (\n        <>\n            <div className=\"canvasWrapper\">\n                <canvas width={CANVAS_WIDTH} height={CANVAS_HEIGHT} ref={createSimulation}/>\n            </div>\n\n            <div className=\"stuffWrapper\">\n                <AgentList/>\n                <Settings/>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}